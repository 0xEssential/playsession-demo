/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export declare namespace IForwardRequest {
  export type ERC721ForwardRequestStruct = {
    from: string;
    authorizer: string;
    to: string;
    nftContract: string;
    nftNonce: BigNumberish;
    tokenId: BigNumberish;
    value: BigNumberish;
    gas: BigNumberish;
    nonce: BigNumberish;
    data: BytesLike;
  };

  export type ERC721ForwardRequestStructOutput = [
    string,
    string,
    string,
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    string
  ] & {
    from: string;
    authorizer: string;
    to: string;
    nftContract: string;
    nftNonce: BigNumber;
    tokenId: BigNumber;
    value: BigNumber;
    gas: BigNumber;
    nonce: BigNumber;
    data: string;
  };

  export type PlaySessionStruct = {
    authorized: string;
    expiresAt: BigNumberish;
  };

  export type PlaySessionStructOutput = [string, BigNumber] & {
    authorized: string;
    expiresAt: BigNumber;
  };
}

export interface EssentialForwarderInterface extends utils.Interface {
  contractName: "EssentialForwarder";
  functions: {
    "ADMIN_ROLE()": FunctionFragment;
    "DEFAULT_ADMIN_ROLE()": FunctionFragment;
    "createMessage(address,uint256,address,uint256,uint256)": FunctionFragment;
    "createSession(address,uint256)": FunctionFragment;
    "execute((address,address,address,address,uint256,uint256,uint256,uint256,uint256,bytes),bytes)": FunctionFragment;
    "executeWithProof(bytes,bytes)": FunctionFragment;
    "getChainId()": FunctionFragment;
    "getNonce(address)": FunctionFragment;
    "getRoleAdmin(bytes32)": FunctionFragment;
    "getSession(address)": FunctionFragment;
    "getTokenNonce(address,uint256)": FunctionFragment;
    "grantRole(bytes32,address)": FunctionFragment;
    "hasRole(bytes32,address)": FunctionFragment;
    "invalidateSession()": FunctionFragment;
    "ownershipSigner()": FunctionFragment;
    "preflight((address,address,address,address,uint256,uint256,uint256,uint256,uint256,bytes),bytes)": FunctionFragment;
    "renounceRole(bytes32,address)": FunctionFragment;
    "revokeRole(bytes32,address)": FunctionFragment;
    "setOwnershipSigner(address)": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "urls(uint256)": FunctionFragment;
    "verify((address,address,address,address,uint256,uint256,uint256,uint256,uint256,bytes),bytes)": FunctionFragment;
    "verifyOwnershipProof((address,address,address,address,uint256,uint256,uint256,uint256,uint256,bytes),bytes)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "createMessage",
    values: [string, BigNumberish, string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "createSession",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "execute",
    values: [IForwardRequest.ERC721ForwardRequestStruct, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "executeWithProof",
    values: [BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getChainId",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "getNonce", values: [string]): string;
  encodeFunctionData(
    functionFragment: "getRoleAdmin",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "getSession", values: [string]): string;
  encodeFunctionData(
    functionFragment: "getTokenNonce",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "grantRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "invalidateSession",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ownershipSigner",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "preflight",
    values: [IForwardRequest.ERC721ForwardRequestStruct, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "setOwnershipSigner",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "urls", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "verify",
    values: [IForwardRequest.ERC721ForwardRequestStruct, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "verifyOwnershipProof",
    values: [IForwardRequest.ERC721ForwardRequestStruct, BytesLike]
  ): string;

  decodeFunctionResult(functionFragment: "ADMIN_ROLE", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createMessage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createSession",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "execute", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "executeWithProof",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getChainId", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getNonce", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getRoleAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getSession", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getTokenNonce",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "invalidateSession",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ownershipSigner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "preflight", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setOwnershipSigner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "urls", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "verify", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "verifyOwnershipProof",
    data: BytesLike
  ): Result;

  events: {
    "RoleAdminChanged(bytes32,bytes32,bytes32)": EventFragment;
    "RoleGranted(bytes32,address,address)": EventFragment;
    "RoleRevoked(bytes32,address,address)": EventFragment;
    "Session(address,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "RoleAdminChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleGranted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleRevoked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Session"): EventFragment;
}

export type RoleAdminChangedEvent = TypedEvent<
  [string, string, string],
  { role: string; previousAdminRole: string; newAdminRole: string }
>;

export type RoleAdminChangedEventFilter =
  TypedEventFilter<RoleAdminChangedEvent>;

export type RoleGrantedEvent = TypedEvent<
  [string, string, string],
  { role: string; account: string; sender: string }
>;

export type RoleGrantedEventFilter = TypedEventFilter<RoleGrantedEvent>;

export type RoleRevokedEvent = TypedEvent<
  [string, string, string],
  { role: string; account: string; sender: string }
>;

export type RoleRevokedEventFilter = TypedEventFilter<RoleRevokedEvent>;

export type SessionEvent = TypedEvent<
  [string, string, BigNumber],
  { owner: string; authorized: string; length: BigNumber }
>;

export type SessionEventFilter = TypedEventFilter<SessionEvent>;

export interface EssentialForwarder extends BaseContract {
  contractName: "EssentialForwarder";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: EssentialForwarderInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    ADMIN_ROLE(overrides?: CallOverrides): Promise<[string]>;

    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<[string]>;

    createMessage(
      nftOwner: string,
      nonce: BigNumberish,
      nftContract: string,
      tokenId: BigNumberish,
      tokenNonce: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    createSession(
      authorized: string,
      length: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    execute(
      req: IForwardRequest.ERC721ForwardRequestStruct,
      signature: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    executeWithProof(
      response: BytesLike,
      extraData: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getChainId(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { id: BigNumber }>;

    getNonce(from: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<[string]>;

    getSession(
      authorizer: string,
      overrides?: CallOverrides
    ): Promise<[IForwardRequest.PlaySessionStructOutput]>;

    getTokenNonce(
      contractAddress: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    invalidateSession(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    ownershipSigner(overrides?: CallOverrides): Promise<[string]>;

    preflight(
      req: IForwardRequest.ERC721ForwardRequestStruct,
      signature: BytesLike,
      overrides?: CallOverrides
    ): Promise<[void]>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setOwnershipSigner(
      newSigner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    urls(arg0: BigNumberish, overrides?: CallOverrides): Promise<[string]>;

    verify(
      req: IForwardRequest.ERC721ForwardRequestStruct,
      signature: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    verifyOwnershipProof(
      req: IForwardRequest.ERC721ForwardRequestStruct,
      signature: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;
  };

  ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

  DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

  createMessage(
    nftOwner: string,
    nonce: BigNumberish,
    nftContract: string,
    tokenId: BigNumberish,
    tokenNonce: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  createSession(
    authorized: string,
    length: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  execute(
    req: IForwardRequest.ERC721ForwardRequestStruct,
    signature: BytesLike,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  executeWithProof(
    response: BytesLike,
    extraData: BytesLike,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getChainId(overrides?: CallOverrides): Promise<BigNumber>;

  getNonce(from: string, overrides?: CallOverrides): Promise<BigNumber>;

  getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<string>;

  getSession(
    authorizer: string,
    overrides?: CallOverrides
  ): Promise<IForwardRequest.PlaySessionStructOutput>;

  getTokenNonce(
    contractAddress: string,
    tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  grantRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  hasRole(
    role: BytesLike,
    account: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  invalidateSession(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  ownershipSigner(overrides?: CallOverrides): Promise<string>;

  preflight(
    req: IForwardRequest.ERC721ForwardRequestStruct,
    signature: BytesLike,
    overrides?: CallOverrides
  ): Promise<void>;

  renounceRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  revokeRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setOwnershipSigner(
    newSigner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  supportsInterface(
    interfaceId: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  urls(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  verify(
    req: IForwardRequest.ERC721ForwardRequestStruct,
    signature: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  verifyOwnershipProof(
    req: IForwardRequest.ERC721ForwardRequestStruct,
    signature: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  callStatic: {
    ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

    createMessage(
      nftOwner: string,
      nonce: BigNumberish,
      nftContract: string,
      tokenId: BigNumberish,
      tokenNonce: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    createSession(
      authorized: string,
      length: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    execute(
      req: IForwardRequest.ERC721ForwardRequestStruct,
      signature: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean, string]>;

    executeWithProof(
      response: BytesLike,
      extraData: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean, string]>;

    getChainId(overrides?: CallOverrides): Promise<BigNumber>;

    getNonce(from: string, overrides?: CallOverrides): Promise<BigNumber>;

    getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<string>;

    getSession(
      authorizer: string,
      overrides?: CallOverrides
    ): Promise<IForwardRequest.PlaySessionStructOutput>;

    getTokenNonce(
      contractAddress: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    invalidateSession(overrides?: CallOverrides): Promise<void>;

    ownershipSigner(overrides?: CallOverrides): Promise<string>;

    preflight(
      req: IForwardRequest.ERC721ForwardRequestStruct,
      signature: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setOwnershipSigner(
      newSigner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    urls(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

    verify(
      req: IForwardRequest.ERC721ForwardRequestStruct,
      signature: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    verifyOwnershipProof(
      req: IForwardRequest.ERC721ForwardRequestStruct,
      signature: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;
  };

  filters: {
    "RoleAdminChanged(bytes32,bytes32,bytes32)"(
      role?: BytesLike | null,
      previousAdminRole?: BytesLike | null,
      newAdminRole?: BytesLike | null
    ): RoleAdminChangedEventFilter;
    RoleAdminChanged(
      role?: BytesLike | null,
      previousAdminRole?: BytesLike | null,
      newAdminRole?: BytesLike | null
    ): RoleAdminChangedEventFilter;

    "RoleGranted(bytes32,address,address)"(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): RoleGrantedEventFilter;
    RoleGranted(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): RoleGrantedEventFilter;

    "RoleRevoked(bytes32,address,address)"(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): RoleRevokedEventFilter;
    RoleRevoked(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): RoleRevokedEventFilter;

    "Session(address,address,uint256)"(
      owner?: string | null,
      authorized?: string | null,
      length?: BigNumberish | null
    ): SessionEventFilter;
    Session(
      owner?: string | null,
      authorized?: string | null,
      length?: BigNumberish | null
    ): SessionEventFilter;
  };

  estimateGas: {
    ADMIN_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    createMessage(
      nftOwner: string,
      nonce: BigNumberish,
      nftContract: string,
      tokenId: BigNumberish,
      tokenNonce: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    createSession(
      authorized: string,
      length: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    execute(
      req: IForwardRequest.ERC721ForwardRequestStruct,
      signature: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    executeWithProof(
      response: BytesLike,
      extraData: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getChainId(overrides?: CallOverrides): Promise<BigNumber>;

    getNonce(from: string, overrides?: CallOverrides): Promise<BigNumber>;

    getRoleAdmin(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSession(
      authorizer: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTokenNonce(
      contractAddress: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    invalidateSession(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    ownershipSigner(overrides?: CallOverrides): Promise<BigNumber>;

    preflight(
      req: IForwardRequest.ERC721ForwardRequestStruct,
      signature: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setOwnershipSigner(
      newSigner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    urls(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    verify(
      req: IForwardRequest.ERC721ForwardRequestStruct,
      signature: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    verifyOwnershipProof(
      req: IForwardRequest.ERC721ForwardRequestStruct,
      signature: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    ADMIN_ROLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    DEFAULT_ADMIN_ROLE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    createMessage(
      nftOwner: string,
      nonce: BigNumberish,
      nftContract: string,
      tokenId: BigNumberish,
      tokenNonce: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    createSession(
      authorized: string,
      length: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    execute(
      req: IForwardRequest.ERC721ForwardRequestStruct,
      signature: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    executeWithProof(
      response: BytesLike,
      extraData: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getChainId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getNonce(
      from: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRoleAdmin(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getSession(
      authorizer: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTokenNonce(
      contractAddress: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    invalidateSession(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    ownershipSigner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    preflight(
      req: IForwardRequest.ERC721ForwardRequestStruct,
      signature: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setOwnershipSigner(
      newSigner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    urls(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    verify(
      req: IForwardRequest.ERC721ForwardRequestStruct,
      signature: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    verifyOwnershipProof(
      req: IForwardRequest.ERC721ForwardRequestStruct,
      signature: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
