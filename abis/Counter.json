{
  "address": "0x5488a1d0fa0e6aBEec460B367704A08d61B15c41",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "trustedForwarder",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "contractAddress",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "counter",
          "type": "address"
        }
      ],
      "name": "Counted",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "collectionCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "count",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "increment",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "forwarder",
          "type": "address"
        }
      ],
      "name": "isTrustedForwarder",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "trustedForwarder",
          "type": "address"
        }
      ],
      "name": "setTrustedForwarder",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xd0fc4b5835e96b3ef25995f742c5240acd3a273db112f823210880a5ccbf25a2",
  "receipt": {
    "to": null,
    "from": "0x2cE6BD653220436eB8f35E146B0Dd1a6013E97a7",
    "contractAddress": "0x5488a1d0fa0e6aBEec460B367704A08d61B15c41",
    "transactionIndex": 0,
    "gasUsed": "355454",
    "logsBloom": "0x
    "blockHash": "0xe8e0649c848dc0366023683fb0304180735ca42a95e4c5a40d86aef8458ffc2b",
    "transactionHash": "0xd0fc4b5835e96b3ef25995f742c5240acd3a273db112f823210880a5ccbf25a2",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 26060111,
        "transactionHash": "0xd0fc4b5835e96b3ef25995f742c5240acd3a273db112f823210880a5ccbf25a2",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x0000000000000000000000002ce6bd653220436eb8f35e146b0dd1a6013e97a7",
          "0x000000000000000000000000c26880a0af2ea0c7e8130e6ec47af756465452e8"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000e94f19f0fd46dc0000000000000000000000000000000000000000000000000ca3dd09027359fa000000000000000000000000000000000000000000000bd8f949dba997bfdcfe0000000000000000000000000000000000000000000000000bba8def1176131e000000000000000000000000000000000000000000000bd8fa332ac388bd23da",
        "logIndex": 0,
        "blockHash": "0xe8e0649c848dc0366023683fb0304180735ca42a95e4c5a40d86aef8458ffc2b"
      }
    ],
    "blockNumber": 26060111,
    "cumulativeGasUsed": "355454",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x9e68946aCfeAfca1307B296CDF8CAb0854A1f110"
  ],
  "numDeployments": 1,
  "solcInputHash": "10e4fd3c1e061dddabc5b982f4378d7d",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"trustedForwarder\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"counter\",\"type\":\"address\"}],\"name\":\"Counted\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"collectionCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"count\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"increment\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"forwarder\",\"type\":\"address\"}],\"name\":\"isTrustedForwarder\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"trustedForwarder\",\"type\":\"address\"}],\"name\":\"setTrustedForwarder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/Counter.sol\":\"Counter\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":2000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"src/Counter.sol\":{\"content\":\"//SPDX-License-Identifier: Unlicense\\npragma solidity ^0.8.9;\\n\\nimport \\\"./EssentialERC2771Context.sol\\\";\\n\\ncontract Counter is EssentialERC2771Context {\\n    uint256 public totalCount;\\n    mapping(address => uint256) public collectionCount;\\n    mapping(address => uint256) public count;\\n    mapping(address => mapping(uint256 => address)) internal registeredNFTs;\\n\\n    event Counted(address indexed contractAddress, uint256 indexed tokenId, address indexed counter);\\n\\n    modifier onlyForwarder() {\\n        require(isTrustedForwarder(msg.sender), \\\"Counter:429\\\");\\n        _;\\n    }\\n\\n    constructor(address trustedForwarder) EssentialERC2771Context(trustedForwarder) {}\\n\\n    function increment() external onlyForwarder {\\n        IForwardRequest.NFT memory nft = _msgNFT();\\n\\n        require(registeredNFTs[nft.contractAddress][nft.tokenId] == address(0), \\\"NFT already counted\\\");\\n\\n        address owner = _msgSender();\\n\\n        registeredNFTs[nft.contractAddress][nft.tokenId] = owner;\\n\\n        unchecked {\\n            ++count[owner];\\n            ++totalCount;\\n            ++collectionCount[nft.contractAddress];\\n        }\\n\\n        emit Counted(nft.contractAddress, nft.tokenId, owner);\\n    }\\n}\\n\",\"keccak256\":\"0x6b4c2133f1355da07fb6450e92af71e49617bdfc38155ad1fc2c2f5f8bd9954c\",\"license\":\"Unlicense\"},\"src/EssentialERC2771Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (metatx/ERC2771Context.sol)\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\nimport \\\"./IForwardRequest.sol\\\";\\n\\n/**\\n * @dev Context variant with ERC2771 support.\\n */\\nabstract contract EssentialERC2771Context is Context {\\n    address private _trustedForwarder;\\n    address public owner;\\n\\n    modifier onlyOwner() {\\n        require(msg.sender == owner, \\\"403\\\");\\n        _;\\n    }\\n\\n    constructor(address trustedForwarder) {\\n        owner = msg.sender;\\n        _trustedForwarder = trustedForwarder;\\n    }\\n\\n    function setTrustedForwarder(address trustedForwarder) external onlyOwner {\\n        _trustedForwarder = trustedForwarder;\\n    }\\n\\n    function isTrustedForwarder(address forwarder) public view virtual returns (bool) {\\n        return forwarder == _trustedForwarder;\\n    }\\n\\n    function _msgSender() internal view virtual override returns (address sender) {\\n        if (isTrustedForwarder(msg.sender)) {\\n            // The assembly code is more direct than the Solidity version using `abi.decode`.\\n            assembly {\\n                sender := shr(0x60, calldataload(sub(calldatasize(), 20)))\\n            }\\n        } else {\\n            return super._msgSender();\\n        }\\n    }\\n\\n    function _msgData() internal view virtual override returns (bytes calldata) {\\n        if (isTrustedForwarder(msg.sender)) {\\n            return msg.data[:msg.data.length - 72];\\n        } else {\\n            return super._msgData();\\n        }\\n    }\\n\\n    function _msgNFT() internal view returns (IForwardRequest.NFT memory) {\\n        uint256 tokenId;\\n        address contractAddress;\\n        if (isTrustedForwarder(msg.sender)) {\\n            assembly {\\n                contractAddress := shr(0x60, calldataload(sub(calldatasize(), 40)))\\n                tokenId := calldataload(sub(calldatasize(), 72))\\n            }\\n        }\\n\\n        return IForwardRequest.NFT({contractAddress: contractAddress, tokenId: tokenId});\\n    }\\n}\\n\",\"keccak256\":\"0xfac024a149d7906fb2ed6ef5ec7ace495930bd1b13e62001878f791b5027c332\",\"license\":\"MIT\"},\"src/IForwardRequest.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\ninterface IForwardRequest {\\n    struct ERC721ForwardRequest {\\n        address from; // Externally-owned account (EOA) signing the request.\\n        address authorizer; // Externally-owned account (EOA) that authorized from account in PlaySession.\\n        address to; // Destination address, normally a smart contract for an nFight game.\\n        address nftContract; // The address of the NFT contract for the token being used.\\n        uint256 nftTokenId; // The tokenId of the NFT being used\\n        uint256 nftChainId; // The chainId of the NFT neing used\\n        uint256 targetChainId; // The chainId where the Forwarder and implementation contract are deployed.\\n        uint256 value; // Amount of ether to transfer to the destination.\\n        uint256 gas; // Amount of gas limit to set for the execution.\\n        uint256 nonce; // On-chain tracked nonce of a transaction.\\n        bytes data; // (Call)data to be sent to the destination.\\n    }\\n\\n    struct MetaTransaction {\\n        uint256 nonce;\\n        address from;\\n        bytes functionSignature;\\n    }\\n\\n    struct PlaySession {\\n        address authorized; // Burner EOA that is authorized to play with NFTs by owner EOA.\\n        uint256 expiresAt; // block timestamp when the session is invalidated.\\n    }\\n\\n    struct NFT {\\n        address contractAddress;\\n        uint256 tokenId;\\n    }\\n}\\n\",\"keccak256\":\"0x0d4b9cc714fa1d70ea8424c1503dd007902f23ef320d91bd76ba682f78da8a3f\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5060405161054538038061054583398101604081905261002f91610062565b600180546001600160a01b03199081163317909155600080546001600160a01b0390931692909116919091179055610092565b60006020828403121561007457600080fd5b81516001600160a01b038116811461008b57600080fd5b9392505050565b6104a4806100a16000396000f3fe608060405234801561001057600080fd5b506004361061007d5760003560e01c80638da5cb5b1161005b5780638da5cb5b146100f0578063d09de08a1461011b578063d17744cd14610125578063da7422281461014557600080fd5b806305d85eda1461008257806334eafb11146100b5578063572b6c05146100be575b600080fd5b6100a261009036600461043e565b60046020526000908152604090205481565b6040519081526020015b60405180910390f35b6100a260025481565b6100e06100cc36600461043e565b6000546001600160a01b0391821691161490565b60405190151581526020016100ac565b600154610103906001600160a01b031681565b6040516001600160a01b0390911681526020016100ac565b610123610158565b005b6100a261013336600461043e565b60036020526000908152604090205481565b61012361015336600461043e565b610305565b6000546001600160a01b031633146101b75760405162461bcd60e51b815260206004820152600b60248201527f436f756e7465723a34323900000000000000000000000000000000000000000060448201526064015b60405180910390fd5b60006101c1610399565b80516001600160a01b039081166000908152600560209081526040808320828601518452909152902054919250161561023c5760405162461bcd60e51b815260206004820152601360248201527f4e465420616c726561647920636f756e7465640000000000000000000000000060448201526064016101ae565b60006102466103fa565b82516001600160a01b0390811660009081526005602090815260408083208288018051855290835281842080547fffffffffffffffffffffffff000000000000000000000000000000000000000016878716908117909155808552600484528285208054600190810190915560028054820190558951871686526003909452828520805490940190935551875191519596509194919316917fe39cf6ce097c10dae6d67cc8b50f2e294be57dc01c496713b260b16300fbe42491a45050565b6001546001600160a01b0316331461035f5760405162461bcd60e51b815260206004820152600360248201527f343033000000000000000000000000000000000000000000000000000000000060448201526064016101ae565b600080547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b0392909216919091179055565b60408051808201909152600080825260208201526000805481906001600160a01b03163314156103d557602836033560601c9050604836033591505b6040518060400160405280826001600160a01b03168152602001838152509250505090565b600080546001600160a01b031633141561043957507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffec36013560601c90565b503390565b60006020828403121561045057600080fd5b81356001600160a01b038116811461046757600080fd5b939250505056fea264697066735822122069d5b87fd37fd33a3943a16a47b0a40f307b88c29963bc57e69f61fbfab2d63964736f6c63430008090033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061007d5760003560e01c80638da5cb5b1161005b5780638da5cb5b146100f0578063d09de08a1461011b578063d17744cd14610125578063da7422281461014557600080fd5b806305d85eda1461008257806334eafb11146100b5578063572b6c05146100be575b600080fd5b6100a261009036600461043e565b60046020526000908152604090205481565b6040519081526020015b60405180910390f35b6100a260025481565b6100e06100cc36600461043e565b6000546001600160a01b0391821691161490565b60405190151581526020016100ac565b600154610103906001600160a01b031681565b6040516001600160a01b0390911681526020016100ac565b610123610158565b005b6100a261013336600461043e565b60036020526000908152604090205481565b61012361015336600461043e565b610305565b6000546001600160a01b031633146101b75760405162461bcd60e51b815260206004820152600b60248201527f436f756e7465723a34323900000000000000000000000000000000000000000060448201526064015b60405180910390fd5b60006101c1610399565b80516001600160a01b039081166000908152600560209081526040808320828601518452909152902054919250161561023c5760405162461bcd60e51b815260206004820152601360248201527f4e465420616c726561647920636f756e7465640000000000000000000000000060448201526064016101ae565b60006102466103fa565b82516001600160a01b0390811660009081526005602090815260408083208288018051855290835281842080547fffffffffffffffffffffffff000000000000000000000000000000000000000016878716908117909155808552600484528285208054600190810190915560028054820190558951871686526003909452828520805490940190935551875191519596509194919316917fe39cf6ce097c10dae6d67cc8b50f2e294be57dc01c496713b260b16300fbe42491a45050565b6001546001600160a01b0316331461035f5760405162461bcd60e51b815260206004820152600360248201527f343033000000000000000000000000000000000000000000000000000000000060448201526064016101ae565b600080547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b0392909216919091179055565b60408051808201909152600080825260208201526000805481906001600160a01b03163314156103d557602836033560601c9050604836033591505b6040518060400160405280826001600160a01b03168152602001838152509250505090565b600080546001600160a01b031633141561043957507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffec36013560601c90565b503390565b60006020828403121561045057600080fd5b81356001600160a01b038116811461046757600080fd5b939250505056fea264697066735822122069d5b87fd37fd33a3943a16a47b0a40f307b88c29963bc57e69f61fbfab2d63964736f6c63430008090033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1308,
        "contract": "src/Counter.sol:Counter",
        "label": "_trustedForwarder",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 1310,
        "contract": "src/Counter.sol:Counter",
        "label": "owner",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 1039,
        "contract": "src/Counter.sol:Counter",
        "label": "totalCount",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 1043,
        "contract": "src/Counter.sol:Counter",
        "label": "collectionCount",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 1047,
        "contract": "src/Counter.sol:Counter",
        "label": "count",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 1053,
        "contract": "src/Counter.sol:Counter",
        "label": "registeredNFTs",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_address))"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_address))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => address))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_address)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}