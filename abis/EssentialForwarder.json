{
  "address": "0x49a3611559be684e6De416B2800bc3ed1765c0DC",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "string[]",
          "name": "_urls",
          "type": "string[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "internalType": "string[]",
          "name": "urls",
          "type": "string[]"
        },
        {
          "internalType": "bytes",
          "name": "callData",
          "type": "bytes"
        },
        {
          "internalType": "bytes4",
          "name": "callbackFunction",
          "type": "bytes4"
        },
        {
          "internalType": "bytes",
          "name": "extraData",
          "type": "bytes"
        }
      ],
      "name": "OffchainLookup",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "authorized",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "length",
          "type": "uint256"
        }
      ],
      "name": "Session",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "nonce",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "nftContract",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "createMessage",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "authorized",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "length",
          "type": "uint256"
        }
      ],
      "name": "createSession",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "response",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "extraData",
          "type": "bytes"
        }
      ],
      "name": "executeWithProof",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        }
      ],
      "name": "getNonce",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "invalidateSession",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ownershipSigner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "from",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "authorizer",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "to",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "nftContract",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "value",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "gas",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "nonce",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "data",
              "type": "bytes"
            }
          ],
          "internalType": "struct IForwardRequest.ForwardRequest",
          "name": "req",
          "type": "tuple"
        },
        {
          "internalType": "bytes",
          "name": "signature",
          "type": "bytes"
        }
      ],
      "name": "preflight",
      "outputs": [],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "urls",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "from",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "authorizer",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "to",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "nftContract",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "value",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "gas",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "nonce",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "data",
              "type": "bytes"
            }
          ],
          "internalType": "struct IForwardRequest.ForwardRequest",
          "name": "req",
          "type": "tuple"
        },
        {
          "internalType": "bytes",
          "name": "signature",
          "type": "bytes"
        }
      ],
      "name": "verifyOwnershipProof",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x4f9a1a0a350e6a82bbc974068ae0cc5fb6e78e11dbb14ab067bc1211d5d9becf",
  "receipt": {
    "to": null,
    "from": "0xc102f76973f4890cAB1b5d1ed26F3623381983aF",
    "contractAddress": "0x49a3611559be684e6De416B2800bc3ed1765c0DC",
    "transactionIndex": 6,
    "gasUsed": "1949437",
    "logsBloom": "0x0000000400000002000000000000000000000000000000000000000000000000000000000000000000000000000000000000800000000000008000010000000000000000000000000000000000000080000000002000000000010000000000000000000002000800000000000000080000000001000000088000000000000000000000000000000000010000000000c000000000000000000000000000000000200000000000000020000000000000000001000000000000001000000000004000000000000000000001000000000000000000000000000100100000000020000000000000000000000000000000000000000000000000000000000000100000",
    "blockHash": "0xac2eb15f72be80c59acff99b4c80471701483ac84f6fed55a3d605f134927bef",
    "transactionHash": "0x4f9a1a0a350e6a82bbc974068ae0cc5fb6e78e11dbb14ab067bc1211d5d9becf",
    "logs": [
      {
        "transactionIndex": 6,
        "blockNumber": 25164212,
        "transactionHash": "0x4f9a1a0a350e6a82bbc974068ae0cc5fb6e78e11dbb14ab067bc1211d5d9becf",
        "address": "0x49a3611559be684e6De416B2800bc3ed1765c0DC",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000c102f76973f4890cab1b5d1ed26f3623381983af",
          "0x000000000000000000000000c102f76973f4890cab1b5d1ed26f3623381983af"
        ],
        "data": "0x",
        "logIndex": 16,
        "blockHash": "0xac2eb15f72be80c59acff99b4c80471701483ac84f6fed55a3d605f134927bef"
      },
      {
        "transactionIndex": 6,
        "blockNumber": 25164212,
        "transactionHash": "0x4f9a1a0a350e6a82bbc974068ae0cc5fb6e78e11dbb14ab067bc1211d5d9becf",
        "address": "0x49a3611559be684e6De416B2800bc3ed1765c0DC",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0xa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c21775",
          "0x000000000000000000000000c102f76973f4890cab1b5d1ed26f3623381983af",
          "0x000000000000000000000000c102f76973f4890cab1b5d1ed26f3623381983af"
        ],
        "data": "0x",
        "logIndex": 17,
        "blockHash": "0xac2eb15f72be80c59acff99b4c80471701483ac84f6fed55a3d605f134927bef"
      },
      {
        "transactionIndex": 6,
        "blockNumber": 25164212,
        "transactionHash": "0x4f9a1a0a350e6a82bbc974068ae0cc5fb6e78e11dbb14ab067bc1211d5d9becf",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x000000000000000000000000c102f76973f4890cab1b5d1ed26f3623381983af",
          "0x000000000000000000000000c26880a0af2ea0c7e8130e6ec47af756465452e8"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000115081adf992fa000000000000000000000000000000000000000000000000011bcf8d0a4f66ab00000000000000000000000000000000000000000000060f0fec91f6fb5fbb8d000000000000000000000000000000000000000000000000010a7f0b5c55d3b100000000000000000000000000000000000000000000060f0ffde278a9594e87",
        "logIndex": 18,
        "blockHash": "0xac2eb15f72be80c59acff99b4c80471701483ac84f6fed55a3d605f134927bef"
      }
    ],
    "blockNumber": 25164212,
    "cumulativeGasUsed": "2447382",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xEssential PlaySession",
    [
      "https://middleware.nfight.xyz"
    ]
  ],
  "numDeployments": 1,
  "solcInputHash": "dbc5e6e323dae605109903a40187d9f8",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string[]\",\"name\":\"_urls\",\"type\":\"string[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"string[]\",\"name\":\"urls\",\"type\":\"string[]\"},{\"internalType\":\"bytes\",\"name\":\"callData\",\"type\":\"bytes\"},{\"internalType\":\"bytes4\",\"name\":\"callbackFunction\",\"type\":\"bytes4\"},{\"internalType\":\"bytes\",\"name\":\"extraData\",\"type\":\"bytes\"}],\"name\":\"OffchainLookup\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"authorized\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"length\",\"type\":\"uint256\"}],\"name\":\"Session\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"nftContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"createMessage\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"authorized\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"length\",\"type\":\"uint256\"}],\"name\":\"createSession\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"response\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"extraData\",\"type\":\"bytes\"}],\"name\":\"executeWithProof\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"}],\"name\":\"getNonce\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"invalidateSession\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ownershipSigner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"authorizer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"nftContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"gas\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct IForwardRequest.ForwardRequest\",\"name\":\"req\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"preflight\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"urls\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"authorizer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"nftContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"gas\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct IForwardRequest.ForwardRequest\",\"name\":\"req\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"verifyOwnershipProof\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"0xEssential\",\"details\":\"Allows a Relayer to submit meta-transactions that utilize an NFT (i.e. in a game) on behalf of EOAs. Transactions      are only executed if the Relayer provides a signature from a trusted signer. The signature must include the current      owner of the Layer 1 NFT being used, or a Burner EOA the owner has authorized to use its NFTs.      EssentialForwarder can be used to build Layer 2 games that use Layer 1 NFTs without bridging and with superior UX.      End users can specify a Burner EOA from their primary EOA, and then use that burner address to play games.      The Burner EOA can then sign messages for game moves without user interaction without any risk to the NFTs or other      assets owned by the primary EOA.\",\"kind\":\"dev\",\"methods\":{\"createMessage(address,uint256,address,uint256)\":{\"details\":\"The RPC server uses this view function to create the ownership proof\",\"params\":{\"account\":\"the address that currently owns the L1 NFT\",\"nftContract\":\"the mainnet contract address for the NFT being utilized\",\"nonce\":\"the meta-transaction nonce for account\",\"tokenId\":\"the tokenId from nftContract for the NFT being utilized\"},\"returns\":{\"_0\":\"the message _ownershipSigner should sign\"}},\"executeWithProof(bytes,bytes)\":{\"details\":\"The RPC call and re-submission should be handled by your Relayer client\",\"params\":{\"extraData\":\"The unaltered bytes in the OffchainLookup extraData error arg\",\"response\":\"The unaltered bytes reponse from a call made to an RPC based on OffchainLookup args\"}},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"invalidateSession()\":{\"details\":\"For efficiency in PlaySession persistence and lookup, an EOA must authorize      itself\"},\"ownershipSigner()\":{\"returns\":{\"_0\":\"the ownership proof signer address\"}},\"preflight((address,address,address,address,uint256,uint256,uint256,uint256,bytes),bytes)\":{\"details\":\"Per EIP-3668, a valid signature will cause a revert with useful error params.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"verifyOwnershipProof((address,address,address,address,uint256,uint256,uint256,uint256,bytes),bytes)\":{\"details\":\"Ensures that _ownershipSigner signed a message containing (nftOwner OR authorized address, nonce, nftContract, tokenId)\",\"params\":{\"req\":\"structured data submitted by EOA making a meta-transaction request\",\"signature\":\"the signature proof created by the ownership signer EOA\"}}},\"title\":\"EssentialForwarder\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"createMessage(address,uint256,address,uint256)\":{\"notice\":\"Construct message that _ownershipSigner must sign as ownership proof\"},\"createSession(address,uint256)\":{\"notice\":\"Allow `authorized` to use your NFTs in a game for `length` seconds. Your NFTs         will not be held in custody or approved for transfer.\"},\"executeWithProof(bytes,bytes)\":{\"notice\":\"Re-submit a valid meta-tx request with trusted proof to execute the transaction.\"},\"getNonce(address)\":{\"notice\":\"Get current nonce for EOA\"},\"invalidateSession()\":{\"notice\":\"Stop allowing your current authorized burner address to use your NFTs.\"},\"ownershipSigner()\":{\"notice\":\"Get ownershipSigner address\"},\"preflight((address,address,address,address,uint256,uint256,uint256,uint256,bytes),bytes)\":{\"notice\":\"Submit a meta-tx request and signature to check validity and receive         a response with data useful for fetching a trusted proof per EIP-3668.\"},\"verifyOwnershipProof((address,address,address,address,uint256,uint256,uint256,uint256,bytes),bytes)\":{\"notice\":\"Verify signed OffchainLookup proof against meta-tx request data\"}},\"notice\":\"EIP-2771 based MetaTransaction Forwarding Contract with EIP-3668 OffchainLookup for cross-chain token gating\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/EssentialForwarder.sol\":\"EssentialForwarder\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":2000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role, _msgSender());\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xb9a137b317dc4806805f2259686186c0c053c32d80fe9c15ecdbf2eb1cf52849\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0x59ce320a585d7e1f163cd70390a0ef2ff9cec832e2aa544293a00692465a7a57\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x32c202bd28995dd20c4347b7c6467a6d3241c74c8ad3edcbb610cd9205916c45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Strings.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        } else if (error == RecoverError.InvalidSignatureV) {\\n            revert(\\\"ECDSA: invalid signature 'v' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        // Check the signature length\\n        // - case 65: r,s,v signature (standard)\\n        // - case 64: r,vs signature (cf https://eips.ethereum.org/EIPS/eip-2098) _Available since v4.1._\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else if (signature.length == 64) {\\n            bytes32 r;\\n            bytes32 vs;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                vs := mload(add(signature, 0x40))\\n            }\\n            return tryRecover(hash, r, vs);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address, RecoverError) {\\n        bytes32 s;\\n        uint8 v;\\n        assembly {\\n            s := and(vs, 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)\\n            v := add(shr(255, vs), 27)\\n        }\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n        if (v != 27 && v != 28) {\\n            return (address(0), RecoverError.InvalidSignatureV);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", Strings.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n    }\\n}\\n\",\"keccak256\":\"0xe9e291de7ffe06e66503c6700b1bb84ff6e0989cbb974653628d8994e7c97f03\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/cryptography/draft-EIP712.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ECDSA.sol\\\";\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-712[EIP 712] is a standard for hashing and signing of typed structured data.\\n *\\n * The encoding specified in the EIP is very generic, and such a generic implementation in Solidity is not feasible,\\n * thus this contract does not implement the encoding itself. Protocols need to implement the type-specific encoding\\n * they need in their contracts using a combination of `abi.encode` and `keccak256`.\\n *\\n * This contract implements the EIP 712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding\\n * scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA\\n * ({_hashTypedDataV4}).\\n *\\n * The implementation of the domain separator was designed to be as efficient as possible while still properly updating\\n * the chain id to protect against replay attacks on an eventual fork of the chain.\\n *\\n * NOTE: This contract implements the version of the encoding known as \\\"v4\\\", as implemented by the JSON RPC method\\n * https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask].\\n *\\n * _Available since v3.4._\\n */\\nabstract contract EIP712 {\\n    /* solhint-disable var-name-mixedcase */\\n    // Cache the domain separator as an immutable value, but also store the chain id that it corresponds to, in order to\\n    // invalidate the cached domain separator if the chain id changes.\\n    bytes32 private immutable _CACHED_DOMAIN_SEPARATOR;\\n    uint256 private immutable _CACHED_CHAIN_ID;\\n    address private immutable _CACHED_THIS;\\n\\n    bytes32 private immutable _HASHED_NAME;\\n    bytes32 private immutable _HASHED_VERSION;\\n    bytes32 private immutable _TYPE_HASH;\\n\\n    /* solhint-enable var-name-mixedcase */\\n\\n    /**\\n     * @dev Initializes the domain separator and parameter caches.\\n     *\\n     * The meaning of `name` and `version` is specified in\\n     * https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP 712]:\\n     *\\n     * - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol.\\n     * - `version`: the current major version of the signing domain.\\n     *\\n     * NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart\\n     * contract upgrade].\\n     */\\n    constructor(string memory name, string memory version) {\\n        bytes32 hashedName = keccak256(bytes(name));\\n        bytes32 hashedVersion = keccak256(bytes(version));\\n        bytes32 typeHash = keccak256(\\n            \\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\"\\n        );\\n        _HASHED_NAME = hashedName;\\n        _HASHED_VERSION = hashedVersion;\\n        _CACHED_CHAIN_ID = block.chainid;\\n        _CACHED_DOMAIN_SEPARATOR = _buildDomainSeparator(typeHash, hashedName, hashedVersion);\\n        _CACHED_THIS = address(this);\\n        _TYPE_HASH = typeHash;\\n    }\\n\\n    /**\\n     * @dev Returns the domain separator for the current chain.\\n     */\\n    function _domainSeparatorV4() internal view returns (bytes32) {\\n        if (address(this) == _CACHED_THIS && block.chainid == _CACHED_CHAIN_ID) {\\n            return _CACHED_DOMAIN_SEPARATOR;\\n        } else {\\n            return _buildDomainSeparator(_TYPE_HASH, _HASHED_NAME, _HASHED_VERSION);\\n        }\\n    }\\n\\n    function _buildDomainSeparator(\\n        bytes32 typeHash,\\n        bytes32 nameHash,\\n        bytes32 versionHash\\n    ) private view returns (bytes32) {\\n        return keccak256(abi.encode(typeHash, nameHash, versionHash, block.chainid, address(this)));\\n    }\\n\\n    /**\\n     * @dev Given an already https://eips.ethereum.org/EIPS/eip-712#definition-of-hashstruct[hashed struct], this\\n     * function returns the hash of the fully encoded EIP712 message for this domain.\\n     *\\n     * This hash can be used together with {ECDSA-recover} to obtain the signer of a message. For example:\\n     *\\n     * ```solidity\\n     * bytes32 digest = _hashTypedDataV4(keccak256(abi.encode(\\n     *     keccak256(\\\"Mail(address to,string contents)\\\"),\\n     *     mailTo,\\n     *     keccak256(bytes(mailContents))\\n     * )));\\n     * address signer = ECDSA.recover(digest, signature);\\n     * ```\\n     */\\n    function _hashTypedDataV4(bytes32 structHash) internal view virtual returns (bytes32) {\\n        return ECDSA.toTypedDataHash(_domainSeparatorV4(), structHash);\\n    }\\n}\\n\",\"keccak256\":\"0x6688fad58b9ec0286d40fa957152e575d5d8bd4c3aa80985efdb11b44f776ae7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"src/EssentialForwarder.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol\\\";\\nimport \\\"./SignedOwnershipProof.sol\\\";\\nimport \\\"./IForwardRequest.sol\\\";\\n\\n/// @title EssentialForwarder\\n/// @author 0xEssential\\n/// @notice EIP-2771 based MetaTransaction Forwarding Contract with EIP-3668 OffchainLookup for cross-chain token gating\\n/// @dev Allows a Relayer to submit meta-transactions that utilize an NFT (i.e. in a game) on behalf of EOAs. Transactions\\n///      are only executed if the Relayer provides a signature from a trusted signer. The signature must include the current\\n///      owner of the Layer 1 NFT being used, or a Burner EOA the owner has authorized to use its NFTs.\\n///\\n///      EssentialForwarder can be used to build Layer 2 games that use Layer 1 NFTs without bridging and with superior UX.\\n///      End users can specify a Burner EOA from their primary EOA, and then use that burner address to play games.\\n///      The Burner EOA can then sign messages for game moves without user interaction without any risk to the NFTs or other\\n///      assets owned by the primary EOA.\\ncontract EssentialForwarder is EIP712, AccessControl, SignedOwnershipProof {\\n    using ECDSA for bytes32;\\n\\n    event Session(address indexed owner, address indexed authorized, uint256 indexed length);\\n    error OffchainLookup(address sender, string[] urls, bytes callData, bytes4 callbackFunction, bytes extraData);\\n\\n    bytes32 public constant ADMIN_ROLE = keccak256(\\\"ADMIN_ROLE\\\");\\n\\n    bytes32 private constant _TYPEHASH =\\n        keccak256(\\\"ForwardRequest(address from,address to,uint256 value,uint256 gas,uint256 nonce,bytes data)\\\");\\n\\n    mapping(address => uint256) private _nonces;\\n    string[] public urls;\\n\\n    constructor(string memory name, string[] memory _urls) EIP712(name, \\\"0.0.1\\\") {\\n        _setupRole(DEFAULT_ADMIN_ROLE, msg.sender);\\n        _setupRole(ADMIN_ROLE, msg.sender);\\n        _setOwnershipSigner(msg.sender);\\n        urls = _urls;\\n    }\\n\\n    /// @notice Get current nonce for EOA\\n    function getNonce(address from) public view returns (uint256) {\\n        return _nonces[from];\\n    }\\n\\n    /// @notice Allow `authorized` to use your NFTs in a game for `length` seconds. Your NFTs\\n    ///         will not be held in custody or approved for transfer.\\n    function createSession(address authorized, uint256 length) external {\\n        _sessions[msg.sender] = IForwardRequest.PlaySession({\\n            authorized: authorized,\\n            expiresAt: block.timestamp + length\\n        });\\n\\n        emit Session(msg.sender, authorized, length);\\n    }\\n\\n    /// @notice Stop allowing your current authorized burner address to use your NFTs.\\n    /// @dev For efficiency in PlaySession persistence and lookup, an EOA must authorize\\n    ///      itself\\n    function invalidateSession() external {\\n        this.createSession(msg.sender, type(uint256).max);\\n    }\\n\\n    /// @notice Submit a meta-tx request and signature to check validity and receive\\n    ///         a response with data useful for fetching a trusted proof per EIP-3668.\\n    /// @dev Per EIP-3668, a valid signature will cause a revert with useful error params.\\n    function preflight(IForwardRequest.ForwardRequest calldata req, bytes calldata signature) public view {\\n        // If the signature is valid for the request and state, the client will receive\\n        // the OffchainLookup error with parameters suitable for an https call to a JSON\\n        // RPC server.\\n\\n        if (verifyRequest(req, signature)) {\\n            revert OffchainLookup(\\n                address(this),\\n                urls,\\n                abi.encode(req.from, _nonces[req.from], req.nftContract, req.tokenId),\\n                this.executeWithProof.selector,\\n                abi.encode(req, signature)\\n            );\\n        }\\n    }\\n\\n    /// @notice Re-submit a valid meta-tx request with trusted proof to execute the transaction.\\n    /// @dev The RPC call and re-submission should be handled by your Relayer client\\n    /// @param response The unaltered bytes reponse from a call made to an RPC based on OffchainLookup args\\n    /// @param extraData The unaltered bytes in the OffchainLookup extraData error arg\\n    function executeWithProof(bytes calldata response, bytes calldata extraData)\\n        external\\n        payable\\n        returns (bool, bytes memory)\\n    {\\n        (IForwardRequest.ForwardRequest memory req, bytes memory signature) = abi.decode(\\n            extraData,\\n            (IForwardRequest.ForwardRequest, bytes)\\n        );\\n\\n        require(verifyOwnershipProof(req, response), \\\"TestForwarder: ownership proof does not match request\\\");\\n        require(verifyRequest(req, signature), \\\"TestForwarder: signature does not match request\\\");\\n\\n        _nonces[req.from] = req.nonce + 1;\\n\\n        (bool success, bytes memory returndata) = req.to.call{gas: req.gas, value: 0}(\\n            abi.encodePacked(req.data, req.authorizer)\\n            // TODO: who should this be on behalf of?\\n            // the second argument here will be _msgSender() on implementation contract\\n            // we want any game achievements / ERC20 rewards to accrue to the primary\\n            // EOA rather than the burner, so Primary EOA feels easiest?\\n\\n            // This _probably_ violates the spec. Not like anyone can stop us!\\n            // Let's just remain cognizant of risk profile and ability to show\\n            // validity of the request - if we pass BurnerPrimary EOA as,\\n            // _msgSender we should be able to show historically whic Burner EOA\\n            // actually signed those txs and that they were signed during a\\n            // period when the Burner was authorized to use the Primary EOA's NFTs\\n        );\\n\\n        // Validate that the relayer has sent enough gas for the call.\\n        // See https://ronan.eth.link/blog/ethereum-gas-dangers/\\n        assert(gasleft() > req.gas / 63);\\n\\n        return (success, returndata);\\n    }\\n\\n    function verifyRequest(IForwardRequest.ForwardRequest memory req, bytes memory signature)\\n        internal\\n        view\\n        returns (bool)\\n    {\\n        address signer = _hashTypedDataV4(\\n            keccak256(abi.encode(_TYPEHASH, req.from, req.to, 0, req.gas, req.nonce, keccak256(req.data)))\\n        ).recover(signature);\\n        return _nonces[req.from] == req.nonce && signer == req.from;\\n    }\\n}\\n\",\"keccak256\":\"0x54629cd5d90e03607a616924869db8dbe107928856500443df75d2de89930cef\",\"license\":\"MIT\"},\"src/IForwardRequest.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\ninterface IForwardRequest {\\n    struct ForwardRequest {\\n        address from; // Externally-owned account (EOA) signing the request.\\n        address authorizer; // Externally-owned account (EOA) that authorized from account in PlaySession.\\n        address to; // Destination address, normally a smart contract for an nFight game.\\n        address nftContract; // The ETH Mainnet address of the NFT contract for the token being used.\\n        uint256 tokenId; // The tokenId of the ETH Mainnet NFT being used\\n        uint256 value; // Amount of ether to transfer to the destination.\\n        uint256 gas; // Amount of gas limit to set for the execution.\\n        uint256 nonce; // On-chain tracked nonce of a transaction.\\n        bytes data; // (Call)data to be sent to the destination.\\n    }\\n\\n    struct PlaySession {\\n        address authorized; // Burner EOA that is authorized to play with NFTs by owner EOA.\\n        uint256 expiresAt; // block timestamp when the session is invalidated.\\n    }\\n}\\n\",\"keccak256\":\"0x38937f7776983ec0a48f61e9c8d1fd3ad8ecf3af0d7b2cff59d59be9e54fcd73\",\"license\":\"MIT\"},\"src/SignedOwnershipProof.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\\\";\\nimport \\\"./IForwardRequest.sol\\\";\\n\\n/// @title SignedOwnershipProof\\n/// @author Sammy Bauch\\n/// @dev Based on SignedAllowance by Simon Fremaux (@dievardump)\\n/// see https://github.com/dievardump/signed-minting\\n\\ncontract SignedOwnershipProof {\\n    using ECDSA for bytes32;\\n\\n    // address used to sign proof of ownership\\n    address private _ownershipSigner;\\n\\n    mapping(address => IForwardRequest.PlaySession) internal _sessions;\\n\\n    /// @notice Construct message that _ownershipSigner must sign as ownership proof\\n    /// @dev The RPC server uses this view function to create the ownership proof\\n    /// @param account the address that currently owns the L1 NFT\\n    /// @param nonce the meta-transaction nonce for account\\n    /// @param nftContract the mainnet contract address for the NFT being utilized\\n    /// @param tokenId the tokenId from nftContract for the NFT being utilized\\n    /// @return the message _ownershipSigner should sign\\n    function createMessage(\\n        address account,\\n        uint256 nonce,\\n        address nftContract,\\n        uint256 tokenId\\n    ) public view returns (bytes32) {\\n        // The JSON RPC server gets the current owner of the L1 NFT and calls this function.\\n        // This respects PlaySession authorizations - if the current L1 owner has authorized\\n        // a Burner EOA to play games with its NFTs via createSession, and the sesssion is still\\n        // valid, the ownership proof will encode the authorized Burner address.\\n\\n        IForwardRequest.PlaySession memory ps = _sessions[account];\\n        require(block.timestamp < ps.expiresAt, \\\"Session Expired\\\");\\n\\n        return keccak256(abi.encode(account, nonce, nftContract, tokenId));\\n    }\\n\\n    /// @notice Verify signed OffchainLookup proof against meta-tx request data\\n    /// @dev Ensures that _ownershipSigner signed a message containing (nftOwner OR authorized address, nonce, nftContract, tokenId)\\n    /// @param req structured data submitted by EOA making a meta-transaction request\\n    /// @param signature the signature proof created by the ownership signer EOA\\n    function verifyOwnershipProof(IForwardRequest.ForwardRequest memory req, bytes memory signature)\\n        public\\n        view\\n        returns (bool)\\n    {\\n        // Only verifies that ownership proof signature matches req and is signed by _ownerShip signer.\\n        // Separately we must verify that the meta-tx signature also matches req and is signed by the\\n        // EOA making the meta-transaction request.\\n\\n        bytes32 message = createMessage(req.from, req.nonce, req.nftContract, req.tokenId).toEthSignedMessageHash();\\n\\n        return message.recover(signature) == _ownershipSigner;\\n    }\\n\\n    /// @notice Get ownershipSigner address\\n    /// @return the ownership proof signer address\\n    function ownershipSigner() public view returns (address) {\\n        return _ownershipSigner;\\n    }\\n\\n    /// @notice Change the ownership signer\\n    /// @dev This signer should hold no assets and is only used for signing L1 ownership proofs.\\n    /// @param newSigner the new signer's public address\\n    function _setOwnershipSigner(address newSigner) internal {\\n        _ownershipSigner = newSigner;\\n    }\\n}\\n\",\"keccak256\":\"0x30de456f1db952d95a9b6a44a91ba8e1056ef04de8689ba67c8e5280f194278c\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6101406040523480156200001257600080fd5b50604051620025bc380380620025bc833981016040819052620000359162000455565b6040805180820182526005815264302e302e3160d81b60209182015283518482012060e08190527fae209a0b48f21c054280f2455d32cf309387644879d9acbd8ffc1991638118856101008190524660a081815285517f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f818701819052818801959095526060810193909352608080840192909252308382018190528651808503909201825260c0938401909652805194019390932090925291905261012052620001026000336200015e565b6200012e7fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c21775336200015e565b600180546001600160a01b031916331790558051620001559060049060208401906200020e565b50505062000589565b6200016a82826200016e565b5050565b6000828152602081815260408083206001600160a01b038516845290915290205460ff166200016a576000828152602081815260408083206001600160a01b03851684529091529020805460ff19166001179055620001ca3390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b82805482825590600052602060002090810192821562000260579160200282015b828111156200026057825180516200024f91849160209091019062000272565b50916020019190600101906200022f565b506200026e929150620002fd565b5090565b82805462000280906200054c565b90600052602060002090601f016020900481019282620002a45760008555620002ef565b82601f10620002bf57805160ff1916838001178555620002ef565b82800160010185558215620002ef579182015b82811115620002ef578251825591602001919060010190620002d2565b506200026e9291506200031e565b808211156200026e57600062000314828262000335565b50600101620002fd565b5b808211156200026e57600081556001016200031f565b50805462000343906200054c565b6000825580601f1062000354575050565b601f0160209004906000526020600020908101906200037491906200031e565b50565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f191681016001600160401b0381118282101715620003b857620003b862000377565b604052919050565b600082601f830112620003d257600080fd5b81516001600160401b03811115620003ee57620003ee62000377565b602062000404601f8301601f191682016200038d565b82815285828487010111156200041957600080fd5b60005b83811015620004395785810183015182820184015282016200041c565b838111156200044b5760008385840101525b5095945050505050565b600080604083850312156200046957600080fd5b82516001600160401b03808211156200048157600080fd5b6200048f86838701620003c0565b9350602091508185015181811115620004a757600080fd5b8501601f81018713620004b957600080fd5b805182811115620004ce57620004ce62000377565b8060051b620004df8582016200038d565b918252828101850191858101908a841115620004fa57600080fd5b86850192505b838310156200053b578251868111156200051a5760008081fd5b6200052a8c8983890101620003c0565b835250918601919086019062000500565b809750505050505050509250929050565b600181811c908216806200056157607f821691505b602082108114156200058357634e487b7160e01b600052602260045260246000fd5b50919050565b60805160a05160c05160e0516101005161012051611fe3620005d9600039600061144b0152600061149a01526000611475015260006113ce015260006113f8015260006114220152611fe36000f3fe60806040526004361061010e5760003560e01c806375b238fc116100a5578063a217fddf11610074578063d547741f11610059578063d547741f14610355578063dbf0eeef14610375578063ffb703ee1461039657600080fd5b8063a217fddf1461032b578063be0fb87e1461034057600080fd5b806375b238fc14610266578063796676be1461029a57806391d14854146102c75780639c48439f1461030b57600080fd5b80632d0335ab116100e15780632d0335ab146101ce5780632f2ff15d1461020457806336568abe1461022657806336ff5f301461024657600080fd5b806301ffc9a71461011357806312ce42fd146101485780631a929fb114610170578063248a9ca31461019e575b600080fd5b34801561011f57600080fd5b5061013361012e36600461161a565b6103b6565b60405190151581526020015b60405180910390f35b34801561015457600080fd5b506001546040516001600160a01b03909116815260200161013f565b34801561017c57600080fd5b5061019061018b366004611678565b61044f565b60405190815260200161013f565b3480156101aa57600080fd5b506101906101b93660046116bc565b60009081526020819052604090206001015490565b3480156101da57600080fd5b506101906101e93660046116d5565b6001600160a01b031660009081526003602052604090205490565b34801561021057600080fd5b5061022461021f3660046116f0565b610529565b005b34801561023257600080fd5b506102246102413660046116f0565b610554565b34801561025257600080fd5b5061022461026136600461175e565b6105e0565b34801561027257600080fd5b506101907fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c2177581565b3480156102a657600080fd5b506102ba6102b53660046116bc565b61072d565b60405161013f9190611828565b3480156102d357600080fd5b506101336102e23660046116f0565b6000918252602082815260408084206001600160a01b0393909316845291905290205460ff1690565b34801561031757600080fd5b506101336103263660046119bf565b6107d9565b34801561033757600080fd5b50610190600081565b34801561034c57600080fd5b50610224610879565b34801561036157600080fd5b506102246103703660046116f0565b6108ec565b610388610383366004611a23565b610912565b60405161013f929190611a8f565b3480156103a257600080fd5b506102246103b1366004611aaa565b610b59565b60007fffffffff0000000000000000000000000000000000000000000000000000000082167f7965db0b00000000000000000000000000000000000000000000000000000000148061044957507f01ffc9a7000000000000000000000000000000000000000000000000000000007fffffffff000000000000000000000000000000000000000000000000000000008316145b92915050565b6001600160a01b03808516600090815260026020908152604080832081518083019092528054909416815260019093015490830181905290919042106104dc5760405162461bcd60e51b815260206004820152600f60248201527f53657373696f6e2045787069726564000000000000000000000000000000000060448201526064015b60405180910390fd5b604080516001600160a01b03808916602083015291810187905290851660608201526080810184905260a00160405160208183030381529060405280519060200120915050949350505050565b6000828152602081905260409020600101546105458133610c03565b61054f8383610c81565b505050565b6001600160a01b03811633146105d25760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201527f20726f6c657320666f722073656c66000000000000000000000000000000000060648201526084016104d3565b6105dc8282610d1f565b5050565b6106286105ec84611ad4565b83838080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250610d9e92505050565b1561054f5730600461063d60208601866116d5565b6003600061064e60208901896116d5565b6001600160a01b0316815260208101919091526040016000205461067860808801606089016116d5565b604080516001600160a01b0394851660208201528082019390935292166060820152608087810135818301528251808303909101815260a082019092527fdbf0eeef00000000000000000000000000000000000000000000000000000000906106e99088908890889060c001611b6f565b60408051601f19818403018152908290527f556f18300000000000000000000000000000000000000000000000000000000082526104d39594939291600401611c8e565b6004818154811061073d57600080fd5b90600052602060002001600091509050805461075890611c53565b80601f016020809104026020016040519081016040528092919081815260200182805461078490611c53565b80156107d15780601f106107a6576101008083540402835291602001916107d1565b820191906000526020600020905b8154815290600101906020018083116107b457829003601f168201915b505050505081565b60008061084e6107fb85600001518660e001518760600151886080015161044f565b6040517f19457468657265756d205369676e6564204d6573736167653a0a3332000000006020820152603c8101829052600090605c01604051602081830303815290604052805190602001209050919050565b6001549091506001600160a01b03166108678285610ea0565b6001600160a01b031614949350505050565b6040517fffb703ee0000000000000000000000000000000000000000000000000000000081523360048201526000196024820152309063ffb703ee90604401600060405180830381600087803b1580156108d257600080fd5b505af11580156108e6573d6000803e3d6000fd5b50505050565b6000828152602081905260409020600101546109088133610c03565b61054f8383610d1f565b600060608180610924858701876119bf565b915091506109688289898080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506107d992505050565b6109da5760405162461bcd60e51b815260206004820152603560248201527f54657374466f727761726465723a206f776e6572736869702070726f6f66206460448201527f6f6573206e6f74206d617463682072657175657374000000000000000000000060648201526084016104d3565b6109e48282610d9e565b610a565760405162461bcd60e51b815260206004820152602f60248201527f54657374466f727761726465723a207369676e617475726520646f6573206e6f60448201527f74206d617463682072657175657374000000000000000000000000000000000060648201526084016104d3565b60e0820151610a66906001611e14565b6003600084600001516001600160a01b03166001600160a01b031681526020019081526020016000208190555060008083604001516001600160a01b03168460c0015160008661010001518760200151604051602001610ac7929190611e2c565b60408051601f1981840301815290829052610ae191611e76565b600060405180830381858888f193505050503d8060008114610b1f576040519150601f19603f3d011682016040523d82523d6000602084013e610b24565b606091505b5091509150603f8460c00151610b3a9190611e92565b5a11610b4857610b48611eb4565b909450925050505b94509492505050565b6040518060400160405280836001600160a01b031681526020018242610b7f9190611e14565b9052336000818152600260209081526040808320855181547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b039182161782559590920151600190920191909155518493861692917f1170e4b3e143a792ce7a7af268ecfe7d7b0574438d8040eb89c2bf5b7e6e15d891a45050565b6000828152602081815260408083206001600160a01b038516845290915290205460ff166105dc57610c3f816001600160a01b03166014610ec4565b610c4a836020610ec4565b604051602001610c5b929190611eca565b60408051601f198184030181529082905262461bcd60e51b82526104d391600401611828565b6000828152602081815260408083206001600160a01b038516845290915290205460ff166105dc576000828152602081815260408083206001600160a01b03851684529091529020805460ff19166001179055610cdb3390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b6000828152602081815260408083206001600160a01b038516845290915290205460ff16156105dc576000828152602081815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b600080610e5d83610e577fdd8f4b70b0f4393e889bd39128a30628a78b61816a9eb8199759e7a349657e488760000151886040015160008a60c001518b60e001518c610100015180519060200120604051602001610e3c97969594939291909687526001600160a01b03958616602088015293909416604086015260ff919091166060850152608084015260a083019190915260c082015260e00190565b604051602081830303815290604052805190602001206110f4565b90610ea0565b60e085015185516001600160a01b0316600090815260036020526040902054919250148015610e98575083516001600160a01b038281169116145b949350505050565b6000806000610eaf858561115d565b91509150610ebc816111cd565b509392505050565b60606000610ed3836002611f4b565b610ede906002611e14565b67ffffffffffffffff811115610ef657610ef661183b565b6040519080825280601f01601f191660200182016040528015610f20576020820181803683370190505b5090507f300000000000000000000000000000000000000000000000000000000000000081600081518110610f5757610f57611f6a565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053507f780000000000000000000000000000000000000000000000000000000000000081600181518110610fba57610fba611f6a565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053506000610ff6846002611f4b565b611001906001611e14565b90505b600181111561109e577f303132333435363738396162636465660000000000000000000000000000000085600f166010811061104257611042611f6a565b1a60f81b82828151811061105857611058611f6a565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535060049490941c9361109781611f80565b9050611004565b5083156110ed5760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e7460448201526064016104d3565b9392505050565b60006104496111016113c1565b836040517f19010000000000000000000000000000000000000000000000000000000000006020820152602281018390526042810182905260009060620160405160208183030381529060405280519060200120905092915050565b6000808251604114156111945760208301516040840151606085015160001a611188878285856114e8565b945094505050506111c6565b8251604014156111be57602083015160408401516111b38683836115d2565b9350935050506111c6565b506000905060025b9250929050565b60008160048111156111e1576111e1611f97565b14156111ea5750565b60018160048111156111fe576111fe611f97565b141561124c5760405162461bcd60e51b815260206004820152601860248201527f45434453413a20696e76616c6964207369676e6174757265000000000000000060448201526064016104d3565b600281600481111561126057611260611f97565b14156112ae5760405162461bcd60e51b815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e6774680060448201526064016104d3565b60038160048111156112c2576112c2611f97565b14156113365760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c60448201527f756500000000000000000000000000000000000000000000000000000000000060648201526084016104d3565b600481600481111561134a5761134a611f97565b14156113be5760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202776272076616c60448201527f756500000000000000000000000000000000000000000000000000000000000060648201526084016104d3565b50565b6000306001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614801561141a57507f000000000000000000000000000000000000000000000000000000000000000046145b1561144457507f000000000000000000000000000000000000000000000000000000000000000090565b50604080517f00000000000000000000000000000000000000000000000000000000000000006020808301919091527f0000000000000000000000000000000000000000000000000000000000000000828401527f000000000000000000000000000000000000000000000000000000000000000060608301524660808301523060a0808401919091528351808403909101815260c0909201909252805191012090565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a083111561151f5750600090506003610b50565b8460ff16601b1415801561153757508460ff16601c14155b156115485750600090506004610b50565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa15801561159c573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b0381166115c557600060019250925050610b50565b9660009650945050505050565b6000807f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff831660ff84901c601b0161160c878288856114e8565b935093505050935093915050565b60006020828403121561162c57600080fd5b81357fffffffff00000000000000000000000000000000000000000000000000000000811681146110ed57600080fd5b80356001600160a01b038116811461167357600080fd5b919050565b6000806000806080858703121561168e57600080fd5b6116978561165c565b9350602085013592506116ac6040860161165c565b9396929550929360600135925050565b6000602082840312156116ce57600080fd5b5035919050565b6000602082840312156116e757600080fd5b6110ed8261165c565b6000806040838503121561170357600080fd5b823591506117136020840161165c565b90509250929050565b60008083601f84011261172e57600080fd5b50813567ffffffffffffffff81111561174657600080fd5b6020830191508360208285010111156111c657600080fd5b60008060006040848603121561177357600080fd5b833567ffffffffffffffff8082111561178b57600080fd5b9085019061012082880312156117a057600080fd5b909350602085013590808211156117b657600080fd5b506117c38682870161171c565b9497909650939450505050565b60005b838110156117eb5781810151838201526020016117d3565b838111156108e65750506000910152565b600081518084526118148160208601602086016117d0565b601f01601f19169290920160200192915050565b6020815260006110ed60208301846117fc565b634e487b7160e01b600052604160045260246000fd5b604051610120810167ffffffffffffffff811182821017156118755761187561183b565b60405290565b600082601f83011261188c57600080fd5b813567ffffffffffffffff808211156118a7576118a761183b565b604051601f8301601f19908116603f011681019082821181831017156118cf576118cf61183b565b816040528381528660208588010111156118e857600080fd5b836020870160208301376000602085830101528094505050505092915050565b6000610120828403121561191b57600080fd5b611923611851565b905061192e8261165c565b815261193c6020830161165c565b602082015261194d6040830161165c565b604082015261195e6060830161165c565b60608201526080820135608082015260a082013560a082015260c082013560c082015260e082013560e08201526101008083013567ffffffffffffffff8111156119a757600080fd5b6119b38582860161187b565b82840152505092915050565b600080604083850312156119d257600080fd5b823567ffffffffffffffff808211156119ea57600080fd5b6119f686838701611908565b93506020850135915080821115611a0c57600080fd5b50611a198582860161187b565b9150509250929050565b60008060008060408587031215611a3957600080fd5b843567ffffffffffffffff80821115611a5157600080fd5b611a5d8883890161171c565b90965094506020870135915080821115611a7657600080fd5b50611a838782880161171c565b95989497509550505050565b8215158152604060208201526000610e9860408301846117fc565b60008060408385031215611abd57600080fd5b611ac68361165c565b946020939093013593505050565b60006104493683611908565b60008083357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe1843603018112611b1557600080fd5b830160208101925035905067ffffffffffffffff811115611b3557600080fd5b8036038313156111c657600080fd5b818352818160208501375060006020828401015260006020601f19601f840116840101905092915050565b60408152611b9060408201611b838661165c565b6001600160a01b03169052565b6000611b9e6020860161165c565b6001600160a01b03166060830152611bb86040860161165c565b6001600160a01b03166080830152611bd26060860161165c565b6001600160a01b03811660a084015250608085013560c083015260a085013560e083015261010060c08601358184015261012060e087013581850152611c1a82880188611ae0565b925081610140860152611c3261016086018483611b44565b925050508281036020840152611c49818587611b44565b9695505050505050565b600181811c90821680611c6757607f821691505b60208210811415611c8857634e487b7160e01b600052602260045260246000fd5b50919050565b600060a082016001600160a01b0388168352602060a08185015281885480845260c08601915060c08160051b870101935060008a8152838120815b83811015611d9e578887037fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff4001855281548390600181811c9080831680611d1157607f831692505b8a8310811415611d2f57634e487b7160e01b88526022600452602488fd5b828c5260208c01818015611d4a5760018114611d5b57611d85565b60ff19861682528c82019650611d85565b6000898152602090208a5b86811015611d7f57815484820152908501908e01611d66565b83019750505b50949b5050978901979490940193505050600101611cc9565b5050505050508281036040840152611db681876117fc565b7fffffffff000000000000000000000000000000000000000000000000000000008616606085015290508281036080840152611df281856117fc565b98975050505050505050565b634e487b7160e01b600052601160045260246000fd5b60008219821115611e2757611e27611dfe565b500190565b60008351611e3e8184602088016117d0565b60609390931b7fffffffffffffffffffffffffffffffffffffffff000000000000000000000000169190920190815260140192915050565b60008251611e888184602087016117d0565b9190910192915050565b600082611eaf57634e487b7160e01b600052601260045260246000fd5b500490565b634e487b7160e01b600052600160045260246000fd5b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000815260008351611f028160178501602088016117d0565b7f206973206d697373696e6720726f6c65200000000000000000000000000000006017918401918201528351611f3f8160288401602088016117d0565b01602801949350505050565b6000816000190483118215151615611f6557611f65611dfe565b500290565b634e487b7160e01b600052603260045260246000fd5b600081611f8f57611f8f611dfe565b506000190190565b634e487b7160e01b600052602160045260246000fdfea2646970667358221220d496e509ac8a1e3b6ab41a0fb251c11874a6259001b1f212bee492355c409c3b64736f6c63430008090033",
  "deployedBytecode": "0x60806040526004361061010e5760003560e01c806375b238fc116100a5578063a217fddf11610074578063d547741f11610059578063d547741f14610355578063dbf0eeef14610375578063ffb703ee1461039657600080fd5b8063a217fddf1461032b578063be0fb87e1461034057600080fd5b806375b238fc14610266578063796676be1461029a57806391d14854146102c75780639c48439f1461030b57600080fd5b80632d0335ab116100e15780632d0335ab146101ce5780632f2ff15d1461020457806336568abe1461022657806336ff5f301461024657600080fd5b806301ffc9a71461011357806312ce42fd146101485780631a929fb114610170578063248a9ca31461019e575b600080fd5b34801561011f57600080fd5b5061013361012e36600461161a565b6103b6565b60405190151581526020015b60405180910390f35b34801561015457600080fd5b506001546040516001600160a01b03909116815260200161013f565b34801561017c57600080fd5b5061019061018b366004611678565b61044f565b60405190815260200161013f565b3480156101aa57600080fd5b506101906101b93660046116bc565b60009081526020819052604090206001015490565b3480156101da57600080fd5b506101906101e93660046116d5565b6001600160a01b031660009081526003602052604090205490565b34801561021057600080fd5b5061022461021f3660046116f0565b610529565b005b34801561023257600080fd5b506102246102413660046116f0565b610554565b34801561025257600080fd5b5061022461026136600461175e565b6105e0565b34801561027257600080fd5b506101907fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c2177581565b3480156102a657600080fd5b506102ba6102b53660046116bc565b61072d565b60405161013f9190611828565b3480156102d357600080fd5b506101336102e23660046116f0565b6000918252602082815260408084206001600160a01b0393909316845291905290205460ff1690565b34801561031757600080fd5b506101336103263660046119bf565b6107d9565b34801561033757600080fd5b50610190600081565b34801561034c57600080fd5b50610224610879565b34801561036157600080fd5b506102246103703660046116f0565b6108ec565b610388610383366004611a23565b610912565b60405161013f929190611a8f565b3480156103a257600080fd5b506102246103b1366004611aaa565b610b59565b60007fffffffff0000000000000000000000000000000000000000000000000000000082167f7965db0b00000000000000000000000000000000000000000000000000000000148061044957507f01ffc9a7000000000000000000000000000000000000000000000000000000007fffffffff000000000000000000000000000000000000000000000000000000008316145b92915050565b6001600160a01b03808516600090815260026020908152604080832081518083019092528054909416815260019093015490830181905290919042106104dc5760405162461bcd60e51b815260206004820152600f60248201527f53657373696f6e2045787069726564000000000000000000000000000000000060448201526064015b60405180910390fd5b604080516001600160a01b03808916602083015291810187905290851660608201526080810184905260a00160405160208183030381529060405280519060200120915050949350505050565b6000828152602081905260409020600101546105458133610c03565b61054f8383610c81565b505050565b6001600160a01b03811633146105d25760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201527f20726f6c657320666f722073656c66000000000000000000000000000000000060648201526084016104d3565b6105dc8282610d1f565b5050565b6106286105ec84611ad4565b83838080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250610d9e92505050565b1561054f5730600461063d60208601866116d5565b6003600061064e60208901896116d5565b6001600160a01b0316815260208101919091526040016000205461067860808801606089016116d5565b604080516001600160a01b0394851660208201528082019390935292166060820152608087810135818301528251808303909101815260a082019092527fdbf0eeef00000000000000000000000000000000000000000000000000000000906106e99088908890889060c001611b6f565b60408051601f19818403018152908290527f556f18300000000000000000000000000000000000000000000000000000000082526104d39594939291600401611c8e565b6004818154811061073d57600080fd5b90600052602060002001600091509050805461075890611c53565b80601f016020809104026020016040519081016040528092919081815260200182805461078490611c53565b80156107d15780601f106107a6576101008083540402835291602001916107d1565b820191906000526020600020905b8154815290600101906020018083116107b457829003601f168201915b505050505081565b60008061084e6107fb85600001518660e001518760600151886080015161044f565b6040517f19457468657265756d205369676e6564204d6573736167653a0a3332000000006020820152603c8101829052600090605c01604051602081830303815290604052805190602001209050919050565b6001549091506001600160a01b03166108678285610ea0565b6001600160a01b031614949350505050565b6040517fffb703ee0000000000000000000000000000000000000000000000000000000081523360048201526000196024820152309063ffb703ee90604401600060405180830381600087803b1580156108d257600080fd5b505af11580156108e6573d6000803e3d6000fd5b50505050565b6000828152602081905260409020600101546109088133610c03565b61054f8383610d1f565b600060608180610924858701876119bf565b915091506109688289898080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506107d992505050565b6109da5760405162461bcd60e51b815260206004820152603560248201527f54657374466f727761726465723a206f776e6572736869702070726f6f66206460448201527f6f6573206e6f74206d617463682072657175657374000000000000000000000060648201526084016104d3565b6109e48282610d9e565b610a565760405162461bcd60e51b815260206004820152602f60248201527f54657374466f727761726465723a207369676e617475726520646f6573206e6f60448201527f74206d617463682072657175657374000000000000000000000000000000000060648201526084016104d3565b60e0820151610a66906001611e14565b6003600084600001516001600160a01b03166001600160a01b031681526020019081526020016000208190555060008083604001516001600160a01b03168460c0015160008661010001518760200151604051602001610ac7929190611e2c565b60408051601f1981840301815290829052610ae191611e76565b600060405180830381858888f193505050503d8060008114610b1f576040519150601f19603f3d011682016040523d82523d6000602084013e610b24565b606091505b5091509150603f8460c00151610b3a9190611e92565b5a11610b4857610b48611eb4565b909450925050505b94509492505050565b6040518060400160405280836001600160a01b031681526020018242610b7f9190611e14565b9052336000818152600260209081526040808320855181547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b039182161782559590920151600190920191909155518493861692917f1170e4b3e143a792ce7a7af268ecfe7d7b0574438d8040eb89c2bf5b7e6e15d891a45050565b6000828152602081815260408083206001600160a01b038516845290915290205460ff166105dc57610c3f816001600160a01b03166014610ec4565b610c4a836020610ec4565b604051602001610c5b929190611eca565b60408051601f198184030181529082905262461bcd60e51b82526104d391600401611828565b6000828152602081815260408083206001600160a01b038516845290915290205460ff166105dc576000828152602081815260408083206001600160a01b03851684529091529020805460ff19166001179055610cdb3390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b6000828152602081815260408083206001600160a01b038516845290915290205460ff16156105dc576000828152602081815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b600080610e5d83610e577fdd8f4b70b0f4393e889bd39128a30628a78b61816a9eb8199759e7a349657e488760000151886040015160008a60c001518b60e001518c610100015180519060200120604051602001610e3c97969594939291909687526001600160a01b03958616602088015293909416604086015260ff919091166060850152608084015260a083019190915260c082015260e00190565b604051602081830303815290604052805190602001206110f4565b90610ea0565b60e085015185516001600160a01b0316600090815260036020526040902054919250148015610e98575083516001600160a01b038281169116145b949350505050565b6000806000610eaf858561115d565b91509150610ebc816111cd565b509392505050565b60606000610ed3836002611f4b565b610ede906002611e14565b67ffffffffffffffff811115610ef657610ef661183b565b6040519080825280601f01601f191660200182016040528015610f20576020820181803683370190505b5090507f300000000000000000000000000000000000000000000000000000000000000081600081518110610f5757610f57611f6a565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053507f780000000000000000000000000000000000000000000000000000000000000081600181518110610fba57610fba611f6a565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053506000610ff6846002611f4b565b611001906001611e14565b90505b600181111561109e577f303132333435363738396162636465660000000000000000000000000000000085600f166010811061104257611042611f6a565b1a60f81b82828151811061105857611058611f6a565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535060049490941c9361109781611f80565b9050611004565b5083156110ed5760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e7460448201526064016104d3565b9392505050565b60006104496111016113c1565b836040517f19010000000000000000000000000000000000000000000000000000000000006020820152602281018390526042810182905260009060620160405160208183030381529060405280519060200120905092915050565b6000808251604114156111945760208301516040840151606085015160001a611188878285856114e8565b945094505050506111c6565b8251604014156111be57602083015160408401516111b38683836115d2565b9350935050506111c6565b506000905060025b9250929050565b60008160048111156111e1576111e1611f97565b14156111ea5750565b60018160048111156111fe576111fe611f97565b141561124c5760405162461bcd60e51b815260206004820152601860248201527f45434453413a20696e76616c6964207369676e6174757265000000000000000060448201526064016104d3565b600281600481111561126057611260611f97565b14156112ae5760405162461bcd60e51b815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e6774680060448201526064016104d3565b60038160048111156112c2576112c2611f97565b14156113365760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c60448201527f756500000000000000000000000000000000000000000000000000000000000060648201526084016104d3565b600481600481111561134a5761134a611f97565b14156113be5760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202776272076616c60448201527f756500000000000000000000000000000000000000000000000000000000000060648201526084016104d3565b50565b6000306001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614801561141a57507f000000000000000000000000000000000000000000000000000000000000000046145b1561144457507f000000000000000000000000000000000000000000000000000000000000000090565b50604080517f00000000000000000000000000000000000000000000000000000000000000006020808301919091527f0000000000000000000000000000000000000000000000000000000000000000828401527f000000000000000000000000000000000000000000000000000000000000000060608301524660808301523060a0808401919091528351808403909101815260c0909201909252805191012090565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a083111561151f5750600090506003610b50565b8460ff16601b1415801561153757508460ff16601c14155b156115485750600090506004610b50565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa15801561159c573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b0381166115c557600060019250925050610b50565b9660009650945050505050565b6000807f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff831660ff84901c601b0161160c878288856114e8565b935093505050935093915050565b60006020828403121561162c57600080fd5b81357fffffffff00000000000000000000000000000000000000000000000000000000811681146110ed57600080fd5b80356001600160a01b038116811461167357600080fd5b919050565b6000806000806080858703121561168e57600080fd5b6116978561165c565b9350602085013592506116ac6040860161165c565b9396929550929360600135925050565b6000602082840312156116ce57600080fd5b5035919050565b6000602082840312156116e757600080fd5b6110ed8261165c565b6000806040838503121561170357600080fd5b823591506117136020840161165c565b90509250929050565b60008083601f84011261172e57600080fd5b50813567ffffffffffffffff81111561174657600080fd5b6020830191508360208285010111156111c657600080fd5b60008060006040848603121561177357600080fd5b833567ffffffffffffffff8082111561178b57600080fd5b9085019061012082880312156117a057600080fd5b909350602085013590808211156117b657600080fd5b506117c38682870161171c565b9497909650939450505050565b60005b838110156117eb5781810151838201526020016117d3565b838111156108e65750506000910152565b600081518084526118148160208601602086016117d0565b601f01601f19169290920160200192915050565b6020815260006110ed60208301846117fc565b634e487b7160e01b600052604160045260246000fd5b604051610120810167ffffffffffffffff811182821017156118755761187561183b565b60405290565b600082601f83011261188c57600080fd5b813567ffffffffffffffff808211156118a7576118a761183b565b604051601f8301601f19908116603f011681019082821181831017156118cf576118cf61183b565b816040528381528660208588010111156118e857600080fd5b836020870160208301376000602085830101528094505050505092915050565b6000610120828403121561191b57600080fd5b611923611851565b905061192e8261165c565b815261193c6020830161165c565b602082015261194d6040830161165c565b604082015261195e6060830161165c565b60608201526080820135608082015260a082013560a082015260c082013560c082015260e082013560e08201526101008083013567ffffffffffffffff8111156119a757600080fd5b6119b38582860161187b565b82840152505092915050565b600080604083850312156119d257600080fd5b823567ffffffffffffffff808211156119ea57600080fd5b6119f686838701611908565b93506020850135915080821115611a0c57600080fd5b50611a198582860161187b565b9150509250929050565b60008060008060408587031215611a3957600080fd5b843567ffffffffffffffff80821115611a5157600080fd5b611a5d8883890161171c565b90965094506020870135915080821115611a7657600080fd5b50611a838782880161171c565b95989497509550505050565b8215158152604060208201526000610e9860408301846117fc565b60008060408385031215611abd57600080fd5b611ac68361165c565b946020939093013593505050565b60006104493683611908565b60008083357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe1843603018112611b1557600080fd5b830160208101925035905067ffffffffffffffff811115611b3557600080fd5b8036038313156111c657600080fd5b818352818160208501375060006020828401015260006020601f19601f840116840101905092915050565b60408152611b9060408201611b838661165c565b6001600160a01b03169052565b6000611b9e6020860161165c565b6001600160a01b03166060830152611bb86040860161165c565b6001600160a01b03166080830152611bd26060860161165c565b6001600160a01b03811660a084015250608085013560c083015260a085013560e083015261010060c08601358184015261012060e087013581850152611c1a82880188611ae0565b925081610140860152611c3261016086018483611b44565b925050508281036020840152611c49818587611b44565b9695505050505050565b600181811c90821680611c6757607f821691505b60208210811415611c8857634e487b7160e01b600052602260045260246000fd5b50919050565b600060a082016001600160a01b0388168352602060a08185015281885480845260c08601915060c08160051b870101935060008a8152838120815b83811015611d9e578887037fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff4001855281548390600181811c9080831680611d1157607f831692505b8a8310811415611d2f57634e487b7160e01b88526022600452602488fd5b828c5260208c01818015611d4a5760018114611d5b57611d85565b60ff19861682528c82019650611d85565b6000898152602090208a5b86811015611d7f57815484820152908501908e01611d66565b83019750505b50949b5050978901979490940193505050600101611cc9565b5050505050508281036040840152611db681876117fc565b7fffffffff000000000000000000000000000000000000000000000000000000008616606085015290508281036080840152611df281856117fc565b98975050505050505050565b634e487b7160e01b600052601160045260246000fd5b60008219821115611e2757611e27611dfe565b500190565b60008351611e3e8184602088016117d0565b60609390931b7fffffffffffffffffffffffffffffffffffffffff000000000000000000000000169190920190815260140192915050565b60008251611e888184602087016117d0565b9190910192915050565b600082611eaf57634e487b7160e01b600052601260045260246000fd5b500490565b634e487b7160e01b600052600160045260246000fd5b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000815260008351611f028160178501602088016117d0565b7f206973206d697373696e6720726f6c65200000000000000000000000000000006017918401918201528351611f3f8160288401602088016117d0565b01602801949350505050565b6000816000190483118215151615611f6557611f65611dfe565b500290565b634e487b7160e01b600052603260045260246000fd5b600081611f8f57611f8f611dfe565b506000190190565b634e487b7160e01b600052602160045260246000fdfea2646970667358221220d496e509ac8a1e3b6ab41a0fb251c11874a6259001b1f212bee492355c409c3b64736f6c63430008090033",
  "devdoc": {
    "author": "0xEssential",
    "details": "Allows a Relayer to submit meta-transactions that utilize an NFT (i.e. in a game) on behalf of EOAs. Transactions      are only executed if the Relayer provides a signature from a trusted signer. The signature must include the current      owner of the Layer 1 NFT being used, or a Burner EOA the owner has authorized to use its NFTs.      EssentialForwarder can be used to build Layer 2 games that use Layer 1 NFTs without bridging and with superior UX.      End users can specify a Burner EOA from their primary EOA, and then use that burner address to play games.      The Burner EOA can then sign messages for game moves without user interaction without any risk to the NFTs or other      assets owned by the primary EOA.",
    "kind": "dev",
    "methods": {
      "createMessage(address,uint256,address,uint256)": {
        "details": "The RPC server uses this view function to create the ownership proof",
        "params": {
          "account": "the address that currently owns the L1 NFT",
          "nftContract": "the mainnet contract address for the NFT being utilized",
          "nonce": "the meta-transaction nonce for account",
          "tokenId": "the tokenId from nftContract for the NFT being utilized"
        },
        "returns": {
          "_0": "the message _ownershipSigner should sign"
        }
      },
      "executeWithProof(bytes,bytes)": {
        "details": "The RPC call and re-submission should be handled by your Relayer client",
        "params": {
          "extraData": "The unaltered bytes in the OffchainLookup extraData error arg",
          "response": "The unaltered bytes reponse from a call made to an RPC based on OffchainLookup args"
        }
      },
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "invalidateSession()": {
        "details": "For efficiency in PlaySession persistence and lookup, an EOA must authorize      itself"
      },
      "ownershipSigner()": {
        "returns": {
          "_0": "the ownership proof signer address"
        }
      },
      "preflight((address,address,address,address,uint256,uint256,uint256,uint256,bytes),bytes)": {
        "details": "Per EIP-3668, a valid signature will cause a revert with useful error params."
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "verifyOwnershipProof((address,address,address,address,uint256,uint256,uint256,uint256,bytes),bytes)": {
        "details": "Ensures that _ownershipSigner signed a message containing (nftOwner OR authorized address, nonce, nftContract, tokenId)",
        "params": {
          "req": "structured data submitted by EOA making a meta-transaction request",
          "signature": "the signature proof created by the ownership signer EOA"
        }
      }
    },
    "title": "EssentialForwarder",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "createMessage(address,uint256,address,uint256)": {
        "notice": "Construct message that _ownershipSigner must sign as ownership proof"
      },
      "createSession(address,uint256)": {
        "notice": "Allow `authorized` to use your NFTs in a game for `length` seconds. Your NFTs         will not be held in custody or approved for transfer."
      },
      "executeWithProof(bytes,bytes)": {
        "notice": "Re-submit a valid meta-tx request with trusted proof to execute the transaction."
      },
      "getNonce(address)": {
        "notice": "Get current nonce for EOA"
      },
      "invalidateSession()": {
        "notice": "Stop allowing your current authorized burner address to use your NFTs."
      },
      "ownershipSigner()": {
        "notice": "Get ownershipSigner address"
      },
      "preflight((address,address,address,address,uint256,uint256,uint256,uint256,bytes),bytes)": {
        "notice": "Submit a meta-tx request and signature to check validity and receive         a response with data useful for fetching a trusted proof per EIP-3668."
      },
      "verifyOwnershipProof((address,address,address,address,uint256,uint256,uint256,uint256,bytes),bytes)": {
        "notice": "Verify signed OffchainLookup proof against meta-tx request data"
      }
    },
    "notice": "EIP-2771 based MetaTransaction Forwarding Contract with EIP-3668 OffchainLookup for cross-chain token gating",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 24,
        "contract": "src/EssentialForwarder.sol:EssentialForwarder",
        "label": "_roles",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)19_storage)"
      },
      {
        "astId": 9787,
        "contract": "src/EssentialForwarder.sol:EssentialForwarder",
        "label": "_ownershipSigner",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 9792,
        "contract": "src/EssentialForwarder.sol:EssentialForwarder",
        "label": "_sessions",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_struct(PlaySession)9776_storage)"
      },
      {
        "astId": 9466,
        "contract": "src/EssentialForwarder.sol:EssentialForwarder",
        "label": "_nonces",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 9469,
        "contract": "src/EssentialForwarder.sol:EssentialForwarder",
        "label": "urls",
        "offset": 0,
        "slot": "4",
        "type": "t_array(t_string_storage)dyn_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_string_storage)dyn_storage": {
        "base": "t_string_storage",
        "encoding": "dynamic_array",
        "label": "string[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_struct(PlaySession)9776_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct IForwardRequest.PlaySession)",
        "numberOfBytes": "32",
        "value": "t_struct(PlaySession)9776_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)19_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControl.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)19_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(PlaySession)9776_storage": {
        "encoding": "inplace",
        "label": "struct IForwardRequest.PlaySession",
        "members": [
          {
            "astId": 9773,
            "contract": "src/EssentialForwarder.sol:EssentialForwarder",
            "label": "authorized",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 9775,
            "contract": "src/EssentialForwarder.sol:EssentialForwarder",
            "label": "expiresAt",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(RoleData)19_storage": {
        "encoding": "inplace",
        "label": "struct AccessControl.RoleData",
        "members": [
          {
            "astId": 16,
            "contract": "src/EssentialForwarder.sol:EssentialForwarder",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 18,
            "contract": "src/EssentialForwarder.sol:EssentialForwarder",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}